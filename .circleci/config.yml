version: 2
jobs:
  build:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run: 
          name: create envfile
          command: |
            echo VUE_APP_API_ENDPOINT=${VUE_APP_API_ENDPOINT} >> ~/project/.env
            echo VUE_APP_GOOGLE_MAPS_API_KEY=${VUE_APP_GOOGLE_MAPS_API_KEY} >> ~/project/.env
      - run:
          # docker-composeファイルがないためできない。
          name: docker-compose build
          command: docker-compose build
  deploy-stg:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run: 
          name: create envfile
          command: |
            echo VUE_APP_API_ENDPOINT=${VUE_APP_API_ENDPOINT_STG} >> ~/project/.env
            echo VUE_APP_GOOGLE_MAPS_API_KEY=${VUE_APP_GOOGLE_MAPS_API_KEY} >> ~/project/.env
            echo VUE_APP_GA_TRACKING_ID=${VUE_APP_GA_TRACKING_ID_STG} >> ~/project/.env
      # see: https://devcenter.heroku.com/articles/container-registry-and-runtime#using-a-ci-cd-platform
      - run:
          name: "build docker image"
          command: docker build --rm=false -t registry.heroku.com/${HEROKU_APP_NAME_STG}/web .
      - run:
          name: setup heroku command
          command: bash .circleci/setup_heroku.sh
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME_STG}
      - run:
          # HEROKU_AUTH_TOKEN is generated by `heroku auth:token`
          name: "push container to registry.heroku.com"
          command: |
            docker login --username=_ --password=$HEROKU_AUTH_TOKEN registry.heroku.com
            docker push registry.heroku.com/${HEROKU_APP_NAME_STG}/web
            heroku container:push web --app ${HEROKU_APP_NAME_STG}
            heroku container:release web --app ${HEROKU_APP_NAME_STG}
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app ${HEROKU_APP_NAME_STG}
  deploy-dev:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run: 
          name: create envfile
          command: |
            echo VUE_APP_API_ENDPOINT=${VUE_APP_API_ENDPOINT_DEV} >> ~/project/.env
            echo VUE_APP_GOOGLE_MAPS_API_KEY=${VUE_APP_GOOGLE_MAPS_API_KEY} >> ~/project/.env
            echo VUE_APP_GA_TRACKING_ID=${VUE_APP_GA_TRACKING_ID_DEV} >> ~/project/.env
      # see: https://devcenter.heroku.com/articles/container-registry-and-runtime#using-a-ci-cd-platform
      - run:
          name: "build docker image"
          command: docker build --rm=false -t registry.heroku.com/${HEROKU_APP_NAME_DEV}/web .
      - run:
          name: setup heroku command
          command: bash .circleci/setup_heroku.sh
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME_DEV}
      - run:
          # HEROKU_AUTH_TOKEN is generated by `heroku auth:token`
          name: "push container to registry.heroku.com"
          command: |
            docker login --username=_ --password=$HEROKU_AUTH_TOKEN registry.heroku.com
            docker push registry.heroku.com/${HEROKU_APP_NAME_DEV}/web
            heroku container:push web --app ${HEROKU_APP_NAME_DEV}
            heroku container:release web --app ${HEROKU_APP_NAME_DEV}
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app ${HEROKU_APP_NAME_DEV}
  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run: 
          name: create envfile
          command: |
            echo VUE_APP_API_ENDPOINT=${VUE_APP_API_ENDPOINT} >> ~/project/.env
            echo VUE_APP_GOOGLE_MAPS_API_KEY=${VUE_APP_GOOGLE_MAPS_API_KEY} >> ~/project/.env
            echo VUE_APP_GA_TRACKING_ID=${VUE_APP_GA_TRACKING_ID} >> ~/project/.env
      # see: https://devcenter.heroku.com/articles/container-registry-and-runtime#using-a-ci-cd-platform
      - run:
          name: "build docker image"
          command: docker build --rm=false -t registry.heroku.com/${HEROKU_APP_NAME}/web .
      - run:
          name: setup heroku command
          command: bash .circleci/setup_heroku.sh
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          # HEROKU_AUTH_TOKEN is generated by `heroku auth:token`
          name: "push container to registry.heroku.com"
          command: |
            docker login --username=_ --password=$HEROKU_AUTH_TOKEN registry.heroku.com
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:push web --app ${HEROKU_APP_NAME}
            heroku container:release web --app ${HEROKU_APP_NAME}
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}
  code_analyze:
    docker:
      - image: circleci/openjdk:8
    steps:
      - checkout
      - run:
          name: analyze by SonarQube
          command: |
            echo sonar.host.url=${SONAR_URL} >> ~/project/sonar-project.properties
            echo sonar.projectKey=${SONAR_PROJECT_KEY} >> ~/project/sonar-project.properties
            echo sonar.projectName=${SONAR_PROJECT} >> ~/project/sonar-project.properties
            echo sonar.sources=src >> ~/project/sonar-project.properties
            echo sonar.login=${SONAR_LOGIN} >> ~/project/sonar-project.properties
            bash ./.circleci/analyze-sonarqube.sh

workflows:
  version: 2
  code_review:
    jobs:
      - code_analyze
  build_and_deploy:
    jobs:
      # - build
      - deploy:
          # requires:
          #  - build
          filters:
            branches:
              only: master
      - deploy-stg:
          # requires:
          #  - build
          filters:
            branches:
              only: staging
      - deploy-dev:
          filters:
            branches:
              only: develop